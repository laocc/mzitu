[download]

reactor_num = 2
;reactor线程数，reactor_num => 2，通过此参数来调节主进程内事件处理线程的数量，以充分利用多核。默认会启用CPU核数相同的数量。
;reactor_num一般设置为CPU核数的1-4倍，在swoole中reactor_num最大不得超过CPU核数*4。


worker_num = 2
;设置启动的worker进程数。业务代码是全异步非阻塞的，这里设置为CPU的1-4倍最合理


max_request = 0
;设置worker进程的最大任务数，默认为0，一个worker进程在处理完超过此数值的任务后将自动退出，进程退出后会释放所有内存和资源。
;这个参数的主要作用是解决PHP进程内存溢出问题。PHP应用程序有缓慢的内存泄漏，但无法定位到具体原因、无法解决，可以通过设置max_request解决。



max_connection = 10000
;服务器程序，最大允许的连接数，如max_conn => 10000, 此参数用来设置Server最大允许维持多少个tcp连接。超过此数量后，新进入的连接将被拒绝。
;max_connection默认值为ulimit -n的值，但不得超过此值，ulimit -n=65535


task_worker_num = 2
;配置Task进程的数量，配置此参数后将会启用task功能。所以Server务必要注册onTask、onFinish2个事件回调函数。如果没有注册，服务器程序将无法启动。

task_ipc_mode = 1
;设置task进程与worker进程之间通信的方式。
;1, 使用unix socket通信，默认模式
;2, 使用消息队列通信
;3, 使用消息队列通信，并设置为争抢模式
;模式2和模式3的不同之处是:
;模式2支持定向投递，$serv->task($data, $task_worker_id) 可以指定投递到哪个task进程。
;模式3是完全争抢模式，task进程会争抢队列，将无法使用定向投递，即使指定了$task_worker_id，在模式3下也是无效的。


task_max_request = 0
;设置task进程的最大任务数。一个task进程在处理完超过此数值的任务后将自动退出。这个参数是为了防止PHP进程内存溢出。如果不希望进程自动退出可以设置为0。

task_tmpdir
;设置task的数据临时目录，在swoole_server中，如果投递的数据超过8192字节，将启用临时文件来保存数据。这里的task_tmpdir就是用来设置临时文件保存的位置。
;Swoole默认会使用/tmp目录存储task数据，如果你的Linux内核版本过低，/tmp目录不是内存文件系统，可以设置为 /dev/shm/


dispatch_mode = 2
;数据包分发策略。可以选择3种类型，默认为2
;1，轮循模式，收到会轮循分配给每一个worker进程
;2，固定模式，根据连接的文件描述符分配worker。这样可以保证同一个连接发来的数据只会被同一个worker处理
;3，抢占模式，主进程会根据Worker的忙闲状态选择投递，只会投递给处于闲置状态的Worker
;4，IP分配，根据客户端IP进行取模hash，分配给一个固定的worker进程。可以保证同一个来源IP的连接数据总会被分配到同一个worker进程。算法为 ip2long(ClientIP) % worker_num
;5，UID分配，需要用户代码中调用 $serv-> bind() 将一个连接绑定1个uid。然后swoole根据UID的值分配到不同的worker进程。算法为 UID % worker_num，如果需要使用字符串作为UID，可以使用crc32(UID_STRING)



dispatch_func
;设置dispatch函数，swoole底层了内置了5种dispatch_mode，如果仍然无法满足需求。可以使用编写C++函数或PHP函数，实现dispatch逻辑


message_queue_key
;设置消息队列的KEY，仅在task_ipc_mode = 2/3时使用。设置的Key仅作为Task任务队列的KEY，此参数的默认值为ftok($php_script_file, 1)
;task队列在server结束后不会销毁，重新启动程序后，task进程仍然会接着处理队列中的任务。如果不希望程序重新启动后不执行旧的Task任务。可以手工删除此消息队列。


daemonize = 0
;守护进程化。设置daemonize => 1时，程序将转入后台作为守护进程运行。长时间运行的服务器端程序必须启用此项。



backlog = 1280
;Listen队列长度，如backlog => 128，此参数将决定最多同时有多少个等待accept的连接。



log_file = {_ROOT}/cache/swoole/{_DATE}.log
;指定swoole错误日志文件

log_level = 0
;设置swoole_server错误日志打印的等级，范围是0-5。低于log_level设置的日志信息不会抛出。
;0 =>DEBUG
;1 =>TRACE
;2 =>INFO
;3 =>NOTICE
;4 =>WARNING
;5 =>ERROR
;*默认是0 也就是所有级别都打印

heartbeat_check_interval
;启用心跳检测，此选项表示每隔多久轮循一次，单位为秒。如 heartbeat_check_interval => 60，表示每60秒，遍历所有连接，如果该连接在60秒内，没有向服务器发送任何数据，此连接将被强制关闭。


heartbeat_idle_time
;与heartbeat_check_interval配合使用。表示连接最大允许空闲的时间。


open_eof_check
;打开EOF检测，此选项将检测客户端连接发来的数据，当数据包结尾是指定的字符串时才会投递给Worker进程。否则会一直拼接数据包，直到超过缓存区或者超时才会中止。当出错时swoole底层会认为是恶意连接，丢弃数据并强制关闭连接。


open_eof_split
;启用EOF自动分包。当设置open_eof_check后，底层检测数据是否以特定的字符串结尾来进行数据缓冲。但默认只截取收到数据的末尾部分做对比。这时候可能会产生多条数据合并在一个包内。


package_eof
;与 open_eof_check 或者 open_eof_split 配合使用，设置EOF字符串。


open_length_check
;打开包长检测特性。包长检测提供了固定包头+包体这种格式协议的解析。启用后，可以保证Worker进程onReceive每次都会收到一个完整的数据包。


package_length_type
;长度值的类型，接受一个字符参数，与php的pack函数一致。目前swoole支持10种类型：
;c：有符号、1字节
;C：无符号、1字节
;s ：有符号、主机字节序、2字节
;S：无符号、主机字节序、2字节
;n：无符号、网络字节序、2字节
;N：无符号、网络字节序、4字节
;l：有符号、主机字节序、4字节（小写L）
;L：无符号、主机字节序、4字节（大写L）
;v：无符号、小端字节序、2字节
;V：无符号、小端字节序、4字节

package_length_func
;设置长度解析函数，支持C++或PHP的2种类型的函数。长度函数必须返回一个整数。


package_max_length
;设置最大数据包尺寸，单位为字节。开启open_length_check/open_eof_check/open_http_protocol等协议解析后。swoole底层会进行数据包拼接。这时在数据包未收取完整时，所有数据都是保存在内存中的。


open_cpu_affinity
;启用CPU亲和性设置。在多核的硬件平台中，启用此特性会将swoole的reactor线程/worker进程绑定到固定的一个核上。可以避免进程/线程的运行时在多个核之间互相切换，提高CPU Cache的命中率。


cpu_affinity_ignore
;IO密集型程序中，所有网络中断都是用CPU0来处理，如果网络IO很重，CPU0负载过高会导致网络中断无法及时处理，那网络收发包的能力就会下降。
;如果不设置此选项，swoole将会使用全部CPU核，底层根据reactor_id或worker_id与CPU核数取模来设置CPU绑定。

open_tcp_nodelay
;启用open_tcp_nodelay，开启后TCP连接发送数据时会关闭Nagle合并算法，立即发往客户端连接。在某些场景下，如http服务器，可以提升响应速度。

tcp_defer_accept
;启用tcp_defer_accept特性，可以设置为一个数值，表示当一个TCP连接有数据发送时才触发accept。


ssl_cert_file
ssl_key_file
;设置SSL隧道加密，设置值为一个文件名字符串，制定cert证书和key私钥的路径。

ssl_method
;设置OpenSSL隧道加密的算法。Server与Client使用的算法必须一致，否则SSL/TLS握手会失败，连接会被切断。 默认算法为 SWOOLE_SSLv23_METHOD

ssl_ciphers
;配置SSL加密套件，默认使用EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
;启用SSL后，设置ssl_ciphers来改变openssl默认的加密算法。Swoole底层默认使用EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH

user = www
;设置worker/task子进程的所属用户

group = www
;设置worker/task子进程的进程用户组。与user配置相同，此配置是修改进程所属用户组，提升服务器程序的安全性。



chroot
;重定向Worker进程的文件系统根目录。此设置可以使进程对文件系统的读写与实际的操作系统文件系统隔离。提升安全性。


pid_file
;在Server启动时自动将master进程的PID写入到文件，在Server关闭时自动删除PID文件。
;使用时需要注意如果Server非正常结束，PID文件不会删除，需要使用swoole_process::kill($pid, 0)来侦测进程是否真的存在


pipe_buffer_size
;调整管道通信的内存缓存区长度。Swoole使用Unix Socket实现进程间通信。


buffer_output_size
;配置发送输出缓存区内存尺寸。


socket_buffer_size
;配置客户端连接的缓存区长度。


enable_unsafe_event
;swoole在配置dispatch_mode=1或3后，因为系统无法保证onConnect/onReceive/onClose的顺序，默认关闭了onConnect/onClose事件。
;如果应用程序需要onConnect/onClose事件，并且能接受顺序问题可能带来的安全风险，可以通过设置enable_unsafe_event为true，启用onConnect/onClose事件



discard_timeout_request
;swoole在配置dispatch_mode=1或3后，系统无法保证onConnect/onReceive/onClose的顺序，因此可能会有一些请求数据在连接关闭后，才能到达Worker进程。
;discard_timeout_request配置默认为true，表示如果worker进程收到了已关闭连接的数据请求，将自动丢弃。discard_timeout_request如果设置为false，表示无论连接是否关闭Worker进程都会处理数据请求。


enable_reuse_port
;设置端口重用，此参数用于优化TCP连接的Accept性能，启用端口重用后多个进程可以同时进行Accept操作。




enable_delay_receive
;设置此选项为true后，accept客户端连接后将不会自动加入EventLoop，仅触发onConnect回调。
;worker进程可以调用$serv->confirm($fd)对连接进行确认，此时才会将fd加入EventLoop开始进行数据收发，也可以调用$serv->close($fd)关闭此连接。


open_http_protocol
;启用Http协议处理，Swoole\Http\Server会自动启用此选项。设置为false表示关闭Http协议处理。

open_http2_protocol
;启用HTTP2协议解析，需要依赖--enable-http2编译选项。默认为false

open_websocket_protocol
;启用websocket协议处理，Swoole\WebSocket\Server会自动启用此选项。设置为false表示关闭websocket协议处理。
;设置open_websocket_protocol选项为true后，会自动设置open_http_protocol协议也为true。

open_mqtt_protocol
;启用mqtt协议处理，启用后会解析mqtt包头，worker进程onReceive每次会返回一个完整的mqtt数据包。


reload_async = true
;设置异步重启开关。设置为true时，将启用异步安全重启特性，Worker进程会等待异步事件完成后再退出。


tcp_fastopen
;开启TCP快速握手特性。此项特性，可以提升TCP短连接的响应速度，在客户端完成握手的第三步，发送SYN包时携带数据。





















